syntax = "proto3";
package v6.services.oauth;
option go_package = "github.com/city404/v6-public-rpc-proto/go/v6/oauth";
// import "common/pub_common.proto";
import "google/api/annotations.proto";


service OauthAuthorization {
    rpc Authorize (AuthorizeRequest) returns (AuthorizeResponse) {
        option (google.api.http) = {
            post: "/v6/oauth/authorize"
            body: "*"
        };
    }

    rpc GetAuthorizeState (AuthorizeState) returns (AuthorizeState) {
        option (google.api.http) = {
            post: "/v6/oauth/get_authorize_state"
            body: "*"
        };
    }

    rpc GetToken (TokenRequest) returns (TokenResponse) {
        option (google.api.http) = {
            post: "/v6/oauth/get_token"
            body: "*"
        };
    }

    rpc RefreshToken (RefreshTokenRequest) returns (TokenResponse) {
        option (google.api.http) = {
            post: "/v6/oauth/refresh_token"
            body: "*"
        };
    }
}

message AuthorizeRequest {
    string client_id = 1; // Client ID
    string response_type = 2; // Response type, e.g., "code"
    string redirect_uri = 3; // Redirect URI
    string scope = 4; // Scopes requested
    string state = 5; // State parameter for CSRF protection
    string code_challenge = 6; // Code challenge for PKCE
    string code_challenge_method = 7; // Method for code challenge, e.g., "S256"
    string version = 8; // Version of the OAuth protocol, e.g., "2.0"
    string nonce = 9; // Nonce for additional security, used in OpenID Connect
    string device = 10; // Device information, used for device authorization
    string mode = 11; // Country code for the user
    string debug_host = 12; // Debug host for testing purposes
    string grant_type = 13; // Grant type, e.g., "authorization_code"
}
message AuthorizeResponse {
    string code = 1; // Authorization code
    string redirect_uri = 2; // Redirect URI to send the user back to
    string state = 3; // State parameter to match the request
    string status = 4; // Status of the authorization request
    // string identity = 4;
}

message AuthorizeState {
    string code = 1; 
    string state = 2; // State parameter for CSRF protection
    string status = 3; // Status of the authorization request
    string redirect_uri = 4; // Redirect URI
    string scope = 5;
    string response_type = 6;
    string version = 7;
    string code_challenge = 8; // Code challenge for PKCE
    string code_challenge_method = 9; // Method for code challenge, e.g., "S256"
    string client_id = 10;
    string device = 11; // Device information, used for device authorization
}

message TokenRequest {
    string code = 3; // Authorization code received from the authorization endpoint
    string redirect_uri = 4; // Redirect URI used in the authorization request
    string grant_type = 5; // Grant type, e.g., "authorization_code"
    string code_verifier = 6; // Code verifier for PKCE
}
message TokenResponse {
    string access_token = 1; // Access token
    string refresh_token = 2; // Refresh token
    int64 expires_in = 3; // Token expiration time in seconds
    string token_type = 4; // Type of the token, e.g., "Bearer"
    string scope = 5; // Scopes granted
    int64 expires_in_ts = 6;
    // string identity = 6; // User identity associated with the token
}
message RefreshTokenRequest {
    string client_id = 1; // Client ID
    string refresh_token = 3; // Refresh token
    string grant_type = 4; // Grant type, e.g., "refresh_token"
}