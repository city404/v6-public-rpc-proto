syntax = "proto3";
package v6.services.oauth;
option go_package = "github.com/city404/v6-public-rpc-proto/go/v6/oauth";
// import "common/pub_common.proto";
import "google/api/annotations.proto";


service OauthAuthorization {
    rpc Authorize (AuthorizeRequest) returns (AuthorizeResponse) {
        option (google.api.http) = {
            post: "/v6/oauth/authorize"
            body: "*"
        };
    }

    rpc GetAuthorizeState (AuthorizeState) returns (AuthorizeState) {
        option (google.api.http) = {
            post: "/v6/oauth/get_authorize_state"
            body: "*"
        };
    }
}

message AuthorizeRequest {
    string client_id = 1; // Client ID
    string response_type = 2; // Response type, e.g., "code"
    string redirect_uri = 3; // Redirect URI
    string scope = 4; // Scopes requested
    string state = 5; // State parameter for CSRF protection
    string code_challenge = 6; // Code challenge for PKCE
    string code_challenge_method = 7; // Method for code challenge, e.g., "S256"
    string version = 8; // Version of the OAuth protocol, e.g., "2.0"
    string nonce = 9; // Nonce for additional security, used in OpenID Connect
    string device = 10; // Device information, used for device authorization
    string mode = 11; // Country code for the user
    string debug_host = 12; // Debug host for testing purposes
}
message AuthorizeResponse {
    string code = 1; // Authorization code
    string redirect_uri = 2; // Redirect URI to send the user back to
    string state = 3; // State parameter to match the request
    string identity = 4;
}

message AuthorizeState {
    string identity = 1; 
    string state = 2; // State parameter for CSRF protection
    int32 state_code = 3; // state for authorization, 0: not authorized, 1: authorized, 2: expired
}