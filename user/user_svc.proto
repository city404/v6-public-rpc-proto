syntax = "proto3";
package v6.services.pub;
option go_package = "github.com/city404/v6-public-rpc-proto/go/v6/user";
import "common/pub_common.proto";
import "google/api/annotations.proto";


service PubUser {
    rpc Get (User) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/get"
            body: "*"
        };
    }
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v6/user/login"
            body: "*"
        };
    } // login with password
    rpc Refresh (Token) returns (Token) {
        option (google.api.http) = {
            post: "/v6/user/refresh"
            body: "*"
        };
    } // refresh token. 
    rpc Logoff (Token) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/logoff"
            body: "*"
        };
    }
    rpc DeviceAuthorization (DeviceAuthorizationRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v6/user/device_authorization"
            body: "*"
        };
    }
    rpc ResetPassword (LoginRequest) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/reset_password"
            body: "*"
        };
    } 
    rpc ChangePassword (ChangePasswordRequest) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/change_password"
            body: "*"
        };
    } 
    rpc Register (RegisterRequest) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/register"
            body: "*"
        };
    }
    rpc Delete (User) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/delete"
            body: "*"
        };
    }
    rpc Update (User) returns (User) {
        option (google.api.http) = {
            post: "/v6/user/update"
            body: "*"
        };
    }
    rpc SendSmsVerifyCode (SmsVeifyCodeSendRequest) returns (SmsVeifyCodeSendResponse) {
        option (google.api.http) = {
            post: "/v6/user/sms_verify_code"
            body: "*"
        };
    }
    rpc SendSmsVerifyCodeNotUser (SmsVeifyCodeSendRequestNotUser) returns (SmsVeifyCodeSendResponse) {
        option (google.api.http) = {
            post: "/v6/user/sms_verify_code_not_user"
            body: "*"
        };
    }
    rpc VerifyAuthToken (LoginRequest) returns (OauthTokenCheckResponse) {
        option (google.api.http) = {
            post: "/v6/user/verify_auth_token"
            body: "*"
        };
    }
    rpc VerifyAuthorizationCode (AuthorizationCode) returns (Token) {
        option (google.api.http) = {
            post: "/v6/user/verify_authorization_code"
            body: "*"
        };
    }
    rpc CheckAuthStatus (LoginRequest) returns (OauthTokenCheckResponse) {
        option (google.api.http) = {
            post: "/v6/user/check_auth_status"
            body: "*"
        };
    }
    rpc CreateAuthToken (LoginRequest) returns (OauthTokenResponse) {
        option (google.api.http) = {
            post: "/v6/user/create_auth_token"
            body: "*"
        };
    }
    rpc ValidateUserInfo (UserValidateInfo) returns (.v6.services.pub.common.UserNameValidateResponse) {
        option (google.api.http) = {
            post: "/v6/user/validate_user_info"
            body: "*"
        };
    }
    rpc GetStatisticsAndQuota (User) returns (UserStatisticsAndQuota) {
        option (google.api.http) = {
            post: "/v6/user/get_statistics_and_quota"
            body: "*"
        };
    }
    rpc ExtendQuota (UserQuotaExtendInfo) returns (UserStatisticsAndQuota) {
        option (google.api.http) = {
            post: "/v6/user/extend_quota"
            body: "*"
        };
    }
    rpc GetAvailableExtendQuota (User) returns (UserQuotaExtendInfo) {
        option (google.api.http) = {
            post: "/v6/user/get_available_extend_quota"
            body: "*"
        };
    }
}

message User {
    string identity = 1; // identity for user, unique in system
    int32 type = 2; // 1: user, 2: admin, 3: super admin
    int32 status = 3; // 1: normal, 2: disabled, 3: deleted
    int64 update_ts = 5;
    string password = 6;
    string name = 7;
    string addon = 8;
    int64 create_ts = 9;
    string hash = 10;
    string icon = 11;
}

message LoginRequest {
    string identity = 1;
    string password = 2;
    string addon = 3;
    string input = 4;
    string type = 5;
    string callback = 6;
    string return_url = 7;
    int32 return_type = 8;
    string captcha = 9;
    string state = 10;
    string country_code = 11;
    string code_challenge = 12; // for oauth2.0 PKCE
    string code_challenge_method = 13; // for oauth2.0 PKCE
    string device = 14; // device information, used for device authorization
    string nonce = 15; // for oauth2.0 nonce
    string scope = 16; // for oauth2.0 scope
    int32 version = 17; // for oauth2.0 version

}

message DeviceAuthorizationRequest {
    string identity = 1;
    string device = 2;
    int32 type = 3;
}

message LoginResponse {
    Token token = 1;
    User user = 2;
    LastLoginResponse last_login = 3;
    string state = 4;
    string code = 5; // for oauth2.0
}

message LastLoginResponse {
    string identity = 1;
    int64 last_login_ts = 2; // millisecond
    string last_login_ip = 3;
    string last_login_device = 4;
}

message Token {
    string identity = 1;
    string user_identity = 2; 
    string device = 3;
    int32 version = 4;
    string access_token = 5;
    string refresh_token = 6;
    int64 update_ts = 7;
    int64 access_token_expire_ts = 8;
    int64 refresh_token_expire_ts = 9;
}

message AuthorizationCode {
    string identity = 1; // user identity
    string code = 2; // authorization code
    string addon = 3; // addon information
    string state = 4; // state for oauth2.0
    string code_verifier = 5; // for oauth2.0 PKCE
    int32 version = 6; // for oauth2.0 version
}
message RegisterRequest {
    string name = 1;
    string password = 2;
    // string country_code = 3;
    // string phone = 4;
    string email = 5;
    string sms_captcha = 6;
    string captcha = 3;
}

message SmsVeifyCodeSendRequest {
    string captcha = 1;
    int32 type = 2;
    string addon = 3;
}


message SmsVeifyCodeSendRequestNotUser {
    string captcha = 1;
    int32 type = 2;
    string addon = 3;
    string country_code = 4;
    string phone = 5;
}

message SmsVeifyCodeSendResponse {
    string captcha = 1;
    int32 type = 2;
    string addon = 3;
    int64 expire_ts = 4;
}

message OauthTokenResponse {
    string url = 1;
    string addon = 2;
    string input = 3;
    string type = 4;
    string callback = 5;
    string return_url = 6;
    int32 return_type = 7;
    string captcha = 8;
    string state = 9;
    //string random = 10; // random string for security
}

message OauthTokenCheckResponse {
    LoginResponse login = 1;
    OauthTokenResponse oauth = 2;
    int32 status = 3;
    string message = 4;
    string code = 5; // for oauth2.0
    string state = 6; // for oauth2.0
}

message ChangePasswordRequest {
    string identity = 1;
    string old_password = 2;
    string new_password = 3;
    string addon = 4;
}

message UserValidateInfo {
    string identity = 1;
    string name = 2;
    string email = 3;
    string phone = 4;
    string country_code = 5;
    string addon = 6;
}

message UserStatisticsAndQuota {
    DiskStatisticsAndQuota disk_statistics_quota = 1;
    TrafficStatisticsAndQuota traffic_statistics_quota = 2;
    OfflineTaskStatisticsAndQuota offline_task_statistics_quota = 3;
}

message DiskStatisticsAndQuota {
    int64 bytes_quota = 1;
    int64 bytes_used = 2;
    int64 bytes_free = 3;
    int64 files_quota = 4;
    int64 files_used = 5;
    int64 bytes_trash_used = 6;
}

message TrafficStatisticsAndQuota {
    int64 daily_bytes_download_quota = 1;
    int64 daily_bytes_upload_quota = 2;
    int64 bytes_downloaded_today = 3;
    int64 bytes_uploaded_today = 4;
}

message OfflineTaskStatisticsAndQuota {
    int64 daily_tasks_quota = 1;
    int64 tasks_commited_today = 2;
    int64 daily_bytes_quota = 3;
    int64 bytes_commited_today = 4;
}

message UserQuotaExtendInfo {
    int64 daily_bytes_download = 1;
    int64 daily_bytes_upload = 2;
    int64 daily_offline_tasks = 3;
    int64 daily_offline_tasks_bytes = 4;
    int64 disk_bytes = 5;
    int64 disk_files = 6;
}