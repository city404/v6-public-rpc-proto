syntax = "proto3";
package v6.services.pub;
option go_package = "github.com/city404/v6-public-rpc-proto/go/v6/userfile";
import "common/pub_common.proto";
import "google/api/annotations.proto";


service PubUserFile {
    rpc Create (File) returns (File) {
        option (google.api.http) = {
            post: "/v6/userfile/create"
            body: "*"
        };
    }
    rpc Get (File) returns (File) {
        option (google.api.http) = {
            post: "/v6/userfile/get"
            body: "*"
        };
    }
    //rpc Update (File) returns (File) {}
    rpc Rename (File) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/rename"
            body: "*"
        };
    }
    rpc Trash (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/trash"
            body: "*"
        };
    }
    rpc Move (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/move"
            body: "*"
        };
    }
    rpc Copy (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/copy"
            body: "*"
        };
    }
    rpc Delete (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/delete"
            body: "*"
        };
    }
    rpc DeleteTrash (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/delete_trash"
            body: "*"
        };
    }
    rpc Recover (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/recover"
            body: "*"
        };
    }
    rpc BatchRename (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/batch_rename"
            body: "*"
        };
    }
    rpc BatchOperation (BatchOperationRequest) returns (BatchOperationResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/batch_operation"
            body: "*"
        };
    }
    rpc List (FileListRequest) returns (FileListResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/list"
            body: "*"
        };
    }
    rpc ListTrash (FileListRequest) returns (FileListResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/list_trash"
            body: "*"
        };
    }
    rpc Search (SearchRequest) returns (FileListResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/search"
            body: "*"
        };
    }
    rpc CreateManageRTCOffer (ManageRTCRequest) returns (ManageRTCResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/create_manage_rtc_offer"
            body: "*"
        };
    }
    rpc SendClientIceCandidate (SendIceCandidateRequest) returns (SendIceCandidateResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/send_client_ice_candidate"
            body: "*"
        };
    }
    rpc GetServerIceCandidate (GetIceCandidateRequest) returns (GetIceCandidateResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/get_server_ice_candidate"
            body: "*"
        };
    }
    rpc ParseFileSlice (File) returns (ParseFileSliceResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/parse_file_slice"
            body: "*"
        };
    }
    rpc GetSliceDownloadAddress (SliceDownloadAddressRequest) returns (SliceDownloadAddressResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/get_slice_download_address"
            body: "*"
        };
    }

    rpc GetDirectDownloadAddress (DirectDownloadRequest) returns (FileDownloadAddressResponse) {
        option (google.api.http) = {
            post: "/v6/userfile/get_direct_download_address"
            body: "*"
        };
    }

    rpc GetDownloadAndPreviewInfo (File) returns (DownloadAndPreviewInfo) {
        option (google.api.http) = {
            post: "/v6/userfile/get_download_and_preview_info"
            body: "*"
        };
    }
    rpc PreviewDoc (File) returns (DocFilePreview) {
        option (google.api.http) = {
            post: "/v6/userfile/preview_doc"
            body: "*"
        };
    }
    rpc CreateDoc (File) returns (DocFilePreview) {
        option (google.api.http) = {
            post: "/v6/userfile/create_doc"
            body: "*"
        };
    }
    rpc CreateUploadToken (File) returns (UploadToken) {
        option (google.api.http) = {
            post: "/v6/userfile/create_upload_token"
            body: "*"
        };
    }
    rpc CreateUploadTask (File) returns (UploadTask) {
        option (google.api.http) = {
            post: "/v6/userfile/create_upload_task"
            body: "*"
        };
    }
    rpc CreateTemporaryUpload (File) returns (UploadTask) {
        option (google.api.http) = {
            post: "/v6/userfile/create_temporary_upload"
            body: "*"
        };
    }
    rpc ReportPreviewStatus (PreviewStatus) returns (PreviewStatus) {
        option (google.api.http) = {
            post: "/v6/userfile/report_preview_status"
            body: "*"
        };
    }
    // rpc CreateDownloadAnswer (RTCDownloadInfo) returns (RTCDownloadInfo) {}
}

message File {
    string identity = 1;
    string parent = 3;
    string name = 4;
    string path = 5;
    string mime_type = 6;
    int64 size = 7;
    int64 type = 8;
    int64 create_ts = 9;
    int64 update_ts = 10;
    int64 delete_ts = 11;
    bool deleted = 12;
    bool dir = 13;
    bool hidden = 14;
    bool locked = 15;
    bool shared = 16;
    bool starred = 17;
    bool trashed = 18;
    int64 locked_at = 19;
    string locked_by = 20;
    int64 shared_at = 21;
    int64 flag = 22;
    string unique = 23;
    string content_identity = 24;
    int64 label = 25;
    int64 store_type = 26;
    int64 version = 27;
    int64 files = 28;
    int64 direcotries = 29;
    int64 nodes = 30;
    string sort_name = 31;
}

message FileListRequest {
    File parent = 1;
    File filter = 2;
    .v6.services.pub.common.ScanListRequest list_info = 3;
}

message SearchRequest {
    string name = 1;
    .v6.services.pub.common.ScanListRequest list_info = 3;
}

message FileListResponse {
    repeated File files = 1;
    .v6.services.pub.common.ScanListRequest list_info = 2;
}

message BatchOperationRequest {
    repeated File source = 1;
    File dest = 2;
    int32 operation = 3;
    int32 flag = 4;
}

message BatchOperationResponse {
    string task  = 1;
    int32 status = 2;
    int64 affected  = 3;
    int64 create_ts = 4;
    int64 progress = 5;
}

message ManageRTCRequest {
    // string content_identity = 1;
    string sdp = 1;
    string offer = 2;
    string client_identity = 3;
}

message ManageRTCResponse {
    // string content_identity = 1;
    int64 file_size = 1;
    string encode_key = 2;
    string sdp = 3;
    string name = 4;
    string connection = 5;
}

message SendIceCandidateRequest {
    // string content_identity = 1;
    string client_identity = 1;
    string candidate = 2;
}

message SendIceCandidateResponse {
    // string content_identity = 1;
    string client_identity = 1;
    string candidate = 2;
}

message GetIceCandidateRequest {
    // string content_identity = 1;
    string client_identity = 1;
    string candidate = 2;
}

message GetIceCandidateResponse {
    // string content_identity = 1;
    string client_identity = 1;
    repeated string candidate = 2;
}


//message ParseFileSliceRequest {
//    string content_identity = 1;
//    // string client_identity = 2;
//}

message ParseFileSliceResponse {
    string content_identity = 1;
    repeated string meta_nodes = 2;
    repeated string raw_nodes = 3;
    int64 file_size = 4;
    repeated SliceSize sizes = 5;
    string sha1 = 6;
    string wcs_etag = 7;
    string name = 8;
    string path = 9;
    int64 store_type = 10;
    repeated SliceDownloadInfo raw_download_addresses = 11;
}

message SliceSize {
    int64 start_index = 1;
    int64 end_index = 2;
    int64 size = 3;
}


message SliceDownloadAddressRequest {
    repeated string identity = 1;
    int32 version = 2;
    string filename = 3;
    int64 flag = 4;
    bool parse = 5;
}

message SliceDownloadAddressResponse {
    repeated SliceDownloadInfo addresses = 1;
    int64 expire_at = 2;
    string request_address = 3;
    int32 version = 4;
}

message FileDownloadAddressResponse {
    string download_address = 1;
    int64 expire_at = 2;
    string request_address = 3;
    int32 version = 4;
    int32 encrypt = 5;
    int64 store_type = 6;
    int64 file_size = 7;
    string path = 8;
    string name = 9;
    string content_identity = 10;
}

message SliceDownloadInfo {
    string identity = 1;
    string download_address = 2;
    string download_token = 3;
    int32 encrypt = 4;
    int64 store_type = 5;
}

message DocFilePreview {
    string identity = 1;
    string parent = 3;
    string name = 4;
    string path = 5;
    string mime_type = 6;
    int64 size = 7;
    int64 type = 8;
    bool can_preview = 9;
    string preview_address = 10;
    string preview_token = 11;
    bool can_edit = 12;
    string edit_address = 13;
    string edit_token = 14;
}

message DownloadAndPreviewInfo {
    string identity = 1;
    string parent = 3;
    string name = 4;
    string path = 5;
    string mime_type = 6;
    int64 size = 7;
    int64 type = 8;
    bool can_preview = 9;
    bool can_edit = 10;
    int32 preview_type = 11;
    int32 download_type = 12;
    string sha1 = 13;
    bool can_download = 14;
    string cannot_download_message = 15;
    string content_identity = 16;
}

message UploadToken {
    string token = 1;
    string access_key = 10;
    string secret_key = 11;
    string bucket = 12;
    string region = 13;
    string endpoint = 14;
    string key = 15;
}

message UploadTask {
    bool created = 1;
    string upload_address = 2;
    string task = 3;
    string upload_token = 4;
    string upload_key = 5;
    string access_key = 10;
    string secret_key = 11;
    string bucket = 12;
    string region = 13;
    string endpoint = 14;
    string key = 15;
    int64 block_size = 16;
    int64 block_hash_type = 17;
    int32 block_version = 18;
    int64 block_codec = 19;
}

message DirectDownloadRequest {
    string identity = 1;
    int32 version = 2;
    string path = 3;
    int64 flag = 4;
    string client_ip = 5;
    string client_ua = 6;
    repeated string video_codecs = 7;
    repeated string audio_codecs = 8;
    int64 expire = 9;
    int32 encrypt = 10;
    string addon = 11;
}

message PreviewStatus {
    string identity = 1; // file identity
    string code = 2; // status code, 0: success, other: fail
    string message = 3; // status message
    string path = 4; // file path
    string status = 5; // processing error, playing, paused, loading, ended
    int32 type = 6; // file type, 1: video, 2: audio, 3: doc, 4: image
    int32 num = 7; 
    int64 report_ts = 8; // report timestamp, unix timestamp in milliseconds
    string video_codec = 9; // video codec
    string audio_codec = 10; // audio codec
    int32 width = 11; // video width
    int32 height = 12; // video height
    float duration = 13; // video duration
    int64 size = 14; // file size
    string extra = 15; // extra info
    string user_agent = 16; // user agent
    string client_id = 17; // client id
    string content_identity = 18; // content identity
    string extra_code = 19; // extra code
    string extra_message = 20; // extra message
    string name = 21; // file name
    int32 playback_type = 22; // playback type, 0: unknown, 1: xg_player, 2: ve_player, 3: dash
    int32 play_mode = 23; // play mode: 0: unknown, 1: converted hls, 2: slice file
    float current_pos = 24; // current position
}