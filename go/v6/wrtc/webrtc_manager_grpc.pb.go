// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: wrtc/webrtc_manager.proto

package wrtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebRTCManageService_StartDownload_FullMethodName        = "/v6.services.p2p.WebRTCManageService/StartDownload"
	WebRTCManageService_StopDownload_FullMethodName         = "/v6.services.p2p.WebRTCManageService/StopDownload"
	WebRTCManageService_Disconnect_FullMethodName           = "/v6.services.p2p.WebRTCManageService/Disconnect"
	WebRTCManageService_SendPeerIceCandidate_FullMethodName = "/v6.services.p2p.WebRTCManageService/SendPeerIceCandidate"
	WebRTCManageService_Receive_FullMethodName              = "/v6.services.p2p.WebRTCManageService/Receive"
)

// WebRTCManageServiceClient is the client API for WebRTCManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebRTCManageServiceClient interface {
	StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (*StartDownloadResponse, error)
	StopDownload(ctx context.Context, in *StopDownloadRequest, opts ...grpc.CallOption) (*StopDownloadResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	SendPeerIceCandidate(ctx context.Context, in *SendPeerIceCandidateRequest, opts ...grpc.CallOption) (*SendPeerIceCandidateResponse, error)
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (WebRTCManageService_ReceiveClient, error)
}

type webRTCManageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRTCManageServiceClient(cc grpc.ClientConnInterface) WebRTCManageServiceClient {
	return &webRTCManageServiceClient{cc}
}

func (c *webRTCManageServiceClient) StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (*StartDownloadResponse, error) {
	out := new(StartDownloadResponse)
	err := c.cc.Invoke(ctx, WebRTCManageService_StartDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCManageServiceClient) StopDownload(ctx context.Context, in *StopDownloadRequest, opts ...grpc.CallOption) (*StopDownloadResponse, error) {
	out := new(StopDownloadResponse)
	err := c.cc.Invoke(ctx, WebRTCManageService_StopDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCManageServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, WebRTCManageService_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCManageServiceClient) SendPeerIceCandidate(ctx context.Context, in *SendPeerIceCandidateRequest, opts ...grpc.CallOption) (*SendPeerIceCandidateResponse, error) {
	out := new(SendPeerIceCandidateResponse)
	err := c.cc.Invoke(ctx, WebRTCManageService_SendPeerIceCandidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCManageServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (WebRTCManageService_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebRTCManageService_ServiceDesc.Streams[0], WebRTCManageService_Receive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webRTCManageServiceReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebRTCManageService_ReceiveClient interface {
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type webRTCManageServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *webRTCManageServiceReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebRTCManageServiceServer is the server API for WebRTCManageService service.
// All implementations must embed UnimplementedWebRTCManageServiceServer
// for forward compatibility
type WebRTCManageServiceServer interface {
	StartDownload(context.Context, *StartDownloadRequest) (*StartDownloadResponse, error)
	StopDownload(context.Context, *StopDownloadRequest) (*StopDownloadResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	SendPeerIceCandidate(context.Context, *SendPeerIceCandidateRequest) (*SendPeerIceCandidateResponse, error)
	Receive(*ReceiveRequest, WebRTCManageService_ReceiveServer) error
	mustEmbedUnimplementedWebRTCManageServiceServer()
}

// UnimplementedWebRTCManageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebRTCManageServiceServer struct {
}

func (UnimplementedWebRTCManageServiceServer) StartDownload(context.Context, *StartDownloadRequest) (*StartDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDownload not implemented")
}
func (UnimplementedWebRTCManageServiceServer) StopDownload(context.Context, *StopDownloadRequest) (*StopDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDownload not implemented")
}
func (UnimplementedWebRTCManageServiceServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedWebRTCManageServiceServer) SendPeerIceCandidate(context.Context, *SendPeerIceCandidateRequest) (*SendPeerIceCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPeerIceCandidate not implemented")
}
func (UnimplementedWebRTCManageServiceServer) Receive(*ReceiveRequest, WebRTCManageService_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedWebRTCManageServiceServer) mustEmbedUnimplementedWebRTCManageServiceServer() {}

// UnsafeWebRTCManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRTCManageServiceServer will
// result in compilation errors.
type UnsafeWebRTCManageServiceServer interface {
	mustEmbedUnimplementedWebRTCManageServiceServer()
}

func RegisterWebRTCManageServiceServer(s grpc.ServiceRegistrar, srv WebRTCManageServiceServer) {
	s.RegisterService(&WebRTCManageService_ServiceDesc, srv)
}

func _WebRTCManageService_StartDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCManageServiceServer).StartDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCManageService_StartDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCManageServiceServer).StartDownload(ctx, req.(*StartDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCManageService_StopDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCManageServiceServer).StopDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCManageService_StopDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCManageServiceServer).StopDownload(ctx, req.(*StopDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCManageService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCManageServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCManageService_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCManageServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCManageService_SendPeerIceCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPeerIceCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCManageServiceServer).SendPeerIceCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCManageService_SendPeerIceCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCManageServiceServer).SendPeerIceCandidate(ctx, req.(*SendPeerIceCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCManageService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebRTCManageServiceServer).Receive(m, &webRTCManageServiceReceiveServer{stream})
}

type WebRTCManageService_ReceiveServer interface {
	Send(*ReceiveResponse) error
	grpc.ServerStream
}

type webRTCManageServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *webRTCManageServiceReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WebRTCManageService_ServiceDesc is the grpc.ServiceDesc for WebRTCManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRTCManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v6.services.p2p.WebRTCManageService",
	HandlerType: (*WebRTCManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDownload",
			Handler:    _WebRTCManageService_StartDownload_Handler,
		},
		{
			MethodName: "StopDownload",
			Handler:    _WebRTCManageService_StopDownload_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WebRTCManageService_Disconnect_Handler,
		},
		{
			MethodName: "SendPeerIceCandidate",
			Handler:    _WebRTCManageService_SendPeerIceCandidate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _WebRTCManageService_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wrtc/webrtc_manager.proto",
}
