// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: oauth/oauth.proto

package oauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OauthAuthorization_Authorize_FullMethodName          = "/v6.services.oauth.OauthAuthorization/Authorize"
	OauthAuthorization_DeviceCode_FullMethodName         = "/v6.services.oauth.OauthAuthorization/DeviceCode"
	OauthAuthorization_GetAuthorizeState_FullMethodName  = "/v6.services.oauth.OauthAuthorization/GetAuthorizeState"
	OauthAuthorization_GetDeviceCodeState_FullMethodName = "/v6.services.oauth.OauthAuthorization/GetDeviceCodeState"
	OauthAuthorization_GetToken_FullMethodName           = "/v6.services.oauth.OauthAuthorization/GetToken"
	OauthAuthorization_RefreshToken_FullMethodName       = "/v6.services.oauth.OauthAuthorization/RefreshToken"
)

// OauthAuthorizationClient is the client API for OauthAuthorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthAuthorizationClient interface {
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	DeviceCode(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*DeviceCodeAuthorizeResponse, error)
	GetAuthorizeState(ctx context.Context, in *AuthorizeState, opts ...grpc.CallOption) (*AuthorizeState, error)
	GetDeviceCodeState(ctx context.Context, in *DeviceCodeAuthorizeState, opts ...grpc.CallOption) (*DeviceCodeAuthorizeState, error)
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type oauthAuthorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthAuthorizationClient(cc grpc.ClientConnInterface) OauthAuthorizationClient {
	return &oauthAuthorizationClient{cc}
}

func (c *oauthAuthorizationClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, OauthAuthorization_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthAuthorizationClient) DeviceCode(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*DeviceCodeAuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceCodeAuthorizeResponse)
	err := c.cc.Invoke(ctx, OauthAuthorization_DeviceCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthAuthorizationClient) GetAuthorizeState(ctx context.Context, in *AuthorizeState, opts ...grpc.CallOption) (*AuthorizeState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeState)
	err := c.cc.Invoke(ctx, OauthAuthorization_GetAuthorizeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthAuthorizationClient) GetDeviceCodeState(ctx context.Context, in *DeviceCodeAuthorizeState, opts ...grpc.CallOption) (*DeviceCodeAuthorizeState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceCodeAuthorizeState)
	err := c.cc.Invoke(ctx, OauthAuthorization_GetDeviceCodeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthAuthorizationClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, OauthAuthorization_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthAuthorizationClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, OauthAuthorization_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthAuthorizationServer is the server API for OauthAuthorization service.
// All implementations must embed UnimplementedOauthAuthorizationServer
// for forward compatibility.
type OauthAuthorizationServer interface {
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	DeviceCode(context.Context, *AuthorizeRequest) (*DeviceCodeAuthorizeResponse, error)
	GetAuthorizeState(context.Context, *AuthorizeState) (*AuthorizeState, error)
	GetDeviceCodeState(context.Context, *DeviceCodeAuthorizeState) (*DeviceCodeAuthorizeState, error)
	GetToken(context.Context, *TokenRequest) (*TokenResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error)
	mustEmbedUnimplementedOauthAuthorizationServer()
}

// UnimplementedOauthAuthorizationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOauthAuthorizationServer struct{}

func (UnimplementedOauthAuthorizationServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedOauthAuthorizationServer) DeviceCode(context.Context, *AuthorizeRequest) (*DeviceCodeAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCode not implemented")
}
func (UnimplementedOauthAuthorizationServer) GetAuthorizeState(context.Context, *AuthorizeState) (*AuthorizeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizeState not implemented")
}
func (UnimplementedOauthAuthorizationServer) GetDeviceCodeState(context.Context, *DeviceCodeAuthorizeState) (*DeviceCodeAuthorizeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCodeState not implemented")
}
func (UnimplementedOauthAuthorizationServer) GetToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedOauthAuthorizationServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedOauthAuthorizationServer) mustEmbedUnimplementedOauthAuthorizationServer() {}
func (UnimplementedOauthAuthorizationServer) testEmbeddedByValue()                            {}

// UnsafeOauthAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthAuthorizationServer will
// result in compilation errors.
type UnsafeOauthAuthorizationServer interface {
	mustEmbedUnimplementedOauthAuthorizationServer()
}

func RegisterOauthAuthorizationServer(s grpc.ServiceRegistrar, srv OauthAuthorizationServer) {
	// If the following call pancis, it indicates UnimplementedOauthAuthorizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OauthAuthorization_ServiceDesc, srv)
}

func _OauthAuthorization_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthAuthorization_DeviceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).DeviceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_DeviceCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).DeviceCode(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthAuthorization_GetAuthorizeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).GetAuthorizeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_GetAuthorizeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).GetAuthorizeState(ctx, req.(*AuthorizeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthAuthorization_GetDeviceCodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCodeAuthorizeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).GetDeviceCodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_GetDeviceCodeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).GetDeviceCodeState(ctx, req.(*DeviceCodeAuthorizeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthAuthorization_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthAuthorization_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthAuthorizationServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthAuthorization_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthAuthorizationServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthAuthorization_ServiceDesc is the grpc.ServiceDesc for OauthAuthorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthAuthorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v6.services.oauth.OauthAuthorization",
	HandlerType: (*OauthAuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _OauthAuthorization_Authorize_Handler,
		},
		{
			MethodName: "DeviceCode",
			Handler:    _OauthAuthorization_DeviceCode_Handler,
		},
		{
			MethodName: "GetAuthorizeState",
			Handler:    _OauthAuthorization_GetAuthorizeState_Handler,
		},
		{
			MethodName: "GetDeviceCodeState",
			Handler:    _OauthAuthorization_GetDeviceCodeState_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _OauthAuthorization_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _OauthAuthorization_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth/oauth.proto",
}
