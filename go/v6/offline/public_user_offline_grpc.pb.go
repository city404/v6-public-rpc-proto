// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: offline/public_user_offline.proto

package offline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PubOfflineTask_Parse_FullMethodName  = "/v6.services.pub.PubOfflineTask/Parse"
	PubOfflineTask_Add_FullMethodName    = "/v6.services.pub.PubOfflineTask/Add"
	PubOfflineTask_List_FullMethodName   = "/v6.services.pub.PubOfflineTask/List"
	PubOfflineTask_Delete_FullMethodName = "/v6.services.pub.PubOfflineTask/Delete"
)

// PubOfflineTaskClient is the client API for PubOfflineTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubOfflineTaskClient interface {
	Parse(ctx context.Context, in *TaskParseRequest, opts ...grpc.CallOption) (*TaskParseResponse, error)
	Add(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTask, error)
	List(ctx context.Context, in *OfflineTaskListRequest, opts ...grpc.CallOption) (*OfflineTaskListResponse, error)
	Delete(ctx context.Context, in *OfflineTaskDeleteRequest, opts ...grpc.CallOption) (*OfflineTaskDeleteResponse, error)
}

type pubOfflineTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewPubOfflineTaskClient(cc grpc.ClientConnInterface) PubOfflineTaskClient {
	return &pubOfflineTaskClient{cc}
}

func (c *pubOfflineTaskClient) Parse(ctx context.Context, in *TaskParseRequest, opts ...grpc.CallOption) (*TaskParseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskParseResponse)
	err := c.cc.Invoke(ctx, PubOfflineTask_Parse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubOfflineTaskClient) Add(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserTask)
	err := c.cc.Invoke(ctx, PubOfflineTask_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubOfflineTaskClient) List(ctx context.Context, in *OfflineTaskListRequest, opts ...grpc.CallOption) (*OfflineTaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfflineTaskListResponse)
	err := c.cc.Invoke(ctx, PubOfflineTask_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubOfflineTaskClient) Delete(ctx context.Context, in *OfflineTaskDeleteRequest, opts ...grpc.CallOption) (*OfflineTaskDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfflineTaskDeleteResponse)
	err := c.cc.Invoke(ctx, PubOfflineTask_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubOfflineTaskServer is the server API for PubOfflineTask service.
// All implementations must embed UnimplementedPubOfflineTaskServer
// for forward compatibility.
type PubOfflineTaskServer interface {
	Parse(context.Context, *TaskParseRequest) (*TaskParseResponse, error)
	Add(context.Context, *UserTask) (*UserTask, error)
	List(context.Context, *OfflineTaskListRequest) (*OfflineTaskListResponse, error)
	Delete(context.Context, *OfflineTaskDeleteRequest) (*OfflineTaskDeleteResponse, error)
	mustEmbedUnimplementedPubOfflineTaskServer()
}

// UnimplementedPubOfflineTaskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPubOfflineTaskServer struct{}

func (UnimplementedPubOfflineTaskServer) Parse(context.Context, *TaskParseRequest) (*TaskParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedPubOfflineTaskServer) Add(context.Context, *UserTask) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPubOfflineTaskServer) List(context.Context, *OfflineTaskListRequest) (*OfflineTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPubOfflineTaskServer) Delete(context.Context, *OfflineTaskDeleteRequest) (*OfflineTaskDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPubOfflineTaskServer) mustEmbedUnimplementedPubOfflineTaskServer() {}
func (UnimplementedPubOfflineTaskServer) testEmbeddedByValue()                        {}

// UnsafePubOfflineTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubOfflineTaskServer will
// result in compilation errors.
type UnsafePubOfflineTaskServer interface {
	mustEmbedUnimplementedPubOfflineTaskServer()
}

func RegisterPubOfflineTaskServer(s grpc.ServiceRegistrar, srv PubOfflineTaskServer) {
	// If the following call pancis, it indicates UnimplementedPubOfflineTaskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PubOfflineTask_ServiceDesc, srv)
}

func _PubOfflineTask_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubOfflineTaskServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubOfflineTask_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubOfflineTaskServer).Parse(ctx, req.(*TaskParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubOfflineTask_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubOfflineTaskServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubOfflineTask_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubOfflineTaskServer).Add(ctx, req.(*UserTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubOfflineTask_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubOfflineTaskServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubOfflineTask_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubOfflineTaskServer).List(ctx, req.(*OfflineTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubOfflineTask_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineTaskDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubOfflineTaskServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubOfflineTask_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubOfflineTaskServer).Delete(ctx, req.(*OfflineTaskDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PubOfflineTask_ServiceDesc is the grpc.ServiceDesc for PubOfflineTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubOfflineTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v6.services.pub.PubOfflineTask",
	HandlerType: (*PubOfflineTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _PubOfflineTask_Parse_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PubOfflineTask_Add_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PubOfflineTask_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PubOfflineTask_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline/public_user_offline.proto",
}
