// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: userfile/public_user_file.proto

package userfile

import (
	common "github.com/city404/v6-public-rpc-proto/go/v6/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity        string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Parent          string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Path            string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	MimeType        string `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size            int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Type            int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	CreateTs        int64  `protobuf:"varint,9,opt,name=create_ts,json=createTs,proto3" json:"create_ts,omitempty"`
	UpdateTs        int64  `protobuf:"varint,10,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`
	DeleteTs        int64  `protobuf:"varint,11,opt,name=delete_ts,json=deleteTs,proto3" json:"delete_ts,omitempty"`
	Deleted         bool   `protobuf:"varint,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Dir             bool   `protobuf:"varint,13,opt,name=dir,proto3" json:"dir,omitempty"`
	Hidden          bool   `protobuf:"varint,14,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Locked          bool   `protobuf:"varint,15,opt,name=locked,proto3" json:"locked,omitempty"`
	Shared          bool   `protobuf:"varint,16,opt,name=shared,proto3" json:"shared,omitempty"`
	Starred         bool   `protobuf:"varint,17,opt,name=starred,proto3" json:"starred,omitempty"`
	Trashed         bool   `protobuf:"varint,18,opt,name=trashed,proto3" json:"trashed,omitempty"`
	LockedAt        int64  `protobuf:"varint,19,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	LockedBy        string `protobuf:"bytes,20,opt,name=locked_by,json=lockedBy,proto3" json:"locked_by,omitempty"`
	SharedAt        int64  `protobuf:"varint,21,opt,name=shared_at,json=sharedAt,proto3" json:"shared_at,omitempty"`
	Flag            int64  `protobuf:"varint,22,opt,name=flag,proto3" json:"flag,omitempty"`
	Unique          string `protobuf:"bytes,23,opt,name=unique,proto3" json:"unique,omitempty"`
	ContentIdentity string `protobuf:"bytes,24,opt,name=content_identity,json=contentIdentity,proto3" json:"content_identity,omitempty"`
	Label           int64  `protobuf:"varint,25,opt,name=label,proto3" json:"label,omitempty"`
	StoreType       int64  `protobuf:"varint,26,opt,name=store_type,json=storeType,proto3" json:"store_type,omitempty"`
	Version         int64  `protobuf:"varint,27,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{0}
}

func (x *File) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *File) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *File) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

func (x *File) GetUpdateTs() int64 {
	if x != nil {
		return x.UpdateTs
	}
	return 0
}

func (x *File) GetDeleteTs() int64 {
	if x != nil {
		return x.DeleteTs
	}
	return 0
}

func (x *File) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *File) GetDir() bool {
	if x != nil {
		return x.Dir
	}
	return false
}

func (x *File) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *File) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *File) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *File) GetStarred() bool {
	if x != nil {
		return x.Starred
	}
	return false
}

func (x *File) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *File) GetLockedAt() int64 {
	if x != nil {
		return x.LockedAt
	}
	return 0
}

func (x *File) GetLockedBy() string {
	if x != nil {
		return x.LockedBy
	}
	return ""
}

func (x *File) GetSharedAt() int64 {
	if x != nil {
		return x.SharedAt
	}
	return 0
}

func (x *File) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *File) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *File) GetContentIdentity() string {
	if x != nil {
		return x.ContentIdentity
	}
	return ""
}

func (x *File) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *File) GetStoreType() int64 {
	if x != nil {
		return x.StoreType
	}
	return 0
}

func (x *File) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FileListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent   *File                   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Filter   *File                   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	ListInfo *common.ScanListRequest `protobuf:"bytes,3,opt,name=list_info,json=listInfo,proto3" json:"list_info,omitempty"`
}

func (x *FileListRequest) Reset() {
	*x = FileListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListRequest) ProtoMessage() {}

func (x *FileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListRequest.ProtoReflect.Descriptor instead.
func (*FileListRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{1}
}

func (x *FileListRequest) GetParent() *File {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FileListRequest) GetFilter() *File {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FileListRequest) GetListInfo() *common.ScanListRequest {
	if x != nil {
		return x.ListInfo
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ListInfo *common.ScanListRequest `protobuf:"bytes,3,opt,name=list_info,json=listInfo,proto3" json:"list_info,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchRequest) GetListInfo() *common.ScanListRequest {
	if x != nil {
		return x.ListInfo
	}
	return nil
}

type FileListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files    []*File                 `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	ListInfo *common.ScanListRequest `protobuf:"bytes,2,opt,name=list_info,json=listInfo,proto3" json:"list_info,omitempty"`
}

func (x *FileListResponse) Reset() {
	*x = FileListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListResponse) ProtoMessage() {}

func (x *FileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListResponse.ProtoReflect.Descriptor instead.
func (*FileListResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{3}
}

func (x *FileListResponse) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileListResponse) GetListInfo() *common.ScanListRequest {
	if x != nil {
		return x.ListInfo
	}
	return nil
}

type BatchOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    []*File `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"`
	Dest      *File   `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Operation int32   `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Flag      int32   `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *BatchOperationRequest) Reset() {
	*x = BatchOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationRequest) ProtoMessage() {}

func (x *BatchOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationRequest.ProtoReflect.Descriptor instead.
func (*BatchOperationRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{4}
}

func (x *BatchOperationRequest) GetSource() []*File {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BatchOperationRequest) GetDest() *File {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *BatchOperationRequest) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *BatchOperationRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type BatchOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task     string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Status   int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Affected int64  `protobuf:"varint,3,opt,name=affected,proto3" json:"affected,omitempty"`
	CreateTs int64  `protobuf:"varint,4,opt,name=create_ts,json=createTs,proto3" json:"create_ts,omitempty"`
	Progress int64  `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *BatchOperationResponse) Reset() {
	*x = BatchOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationResponse) ProtoMessage() {}

func (x *BatchOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationResponse.ProtoReflect.Descriptor instead.
func (*BatchOperationResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{5}
}

func (x *BatchOperationResponse) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *BatchOperationResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BatchOperationResponse) GetAffected() int64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

func (x *BatchOperationResponse) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

func (x *BatchOperationResponse) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ManageRTCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	Sdp            string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	Offer          string `protobuf:"bytes,2,opt,name=offer,proto3" json:"offer,omitempty"`
	ClientIdentity string `protobuf:"bytes,3,opt,name=client_identity,json=clientIdentity,proto3" json:"client_identity,omitempty"`
}

func (x *ManageRTCRequest) Reset() {
	*x = ManageRTCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageRTCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageRTCRequest) ProtoMessage() {}

func (x *ManageRTCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageRTCRequest.ProtoReflect.Descriptor instead.
func (*ManageRTCRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{6}
}

func (x *ManageRTCRequest) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *ManageRTCRequest) GetOffer() string {
	if x != nil {
		return x.Offer
	}
	return ""
}

func (x *ManageRTCRequest) GetClientIdentity() string {
	if x != nil {
		return x.ClientIdentity
	}
	return ""
}

type ManageRTCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	FileSize   int64  `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	EncodeKey  string `protobuf:"bytes,2,opt,name=encode_key,json=encodeKey,proto3" json:"encode_key,omitempty"`
	Sdp        string `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Connection string `protobuf:"bytes,5,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ManageRTCResponse) Reset() {
	*x = ManageRTCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageRTCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageRTCResponse) ProtoMessage() {}

func (x *ManageRTCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageRTCResponse.ProtoReflect.Descriptor instead.
func (*ManageRTCResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{7}
}

func (x *ManageRTCResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ManageRTCResponse) GetEncodeKey() string {
	if x != nil {
		return x.EncodeKey
	}
	return ""
}

func (x *ManageRTCResponse) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *ManageRTCResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManageRTCResponse) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

type SendIceCandidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	ClientIdentity string `protobuf:"bytes,1,opt,name=client_identity,json=clientIdentity,proto3" json:"client_identity,omitempty"`
	Candidate      string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *SendIceCandidateRequest) Reset() {
	*x = SendIceCandidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendIceCandidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendIceCandidateRequest) ProtoMessage() {}

func (x *SendIceCandidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendIceCandidateRequest.ProtoReflect.Descriptor instead.
func (*SendIceCandidateRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{8}
}

func (x *SendIceCandidateRequest) GetClientIdentity() string {
	if x != nil {
		return x.ClientIdentity
	}
	return ""
}

func (x *SendIceCandidateRequest) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

type SendIceCandidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	ClientIdentity string `protobuf:"bytes,1,opt,name=client_identity,json=clientIdentity,proto3" json:"client_identity,omitempty"`
	Candidate      string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *SendIceCandidateResponse) Reset() {
	*x = SendIceCandidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendIceCandidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendIceCandidateResponse) ProtoMessage() {}

func (x *SendIceCandidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendIceCandidateResponse.ProtoReflect.Descriptor instead.
func (*SendIceCandidateResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{9}
}

func (x *SendIceCandidateResponse) GetClientIdentity() string {
	if x != nil {
		return x.ClientIdentity
	}
	return ""
}

func (x *SendIceCandidateResponse) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

type GetIceCandidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	ClientIdentity string `protobuf:"bytes,1,opt,name=client_identity,json=clientIdentity,proto3" json:"client_identity,omitempty"`
	Candidate      string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *GetIceCandidateRequest) Reset() {
	*x = GetIceCandidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIceCandidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIceCandidateRequest) ProtoMessage() {}

func (x *GetIceCandidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIceCandidateRequest.ProtoReflect.Descriptor instead.
func (*GetIceCandidateRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{10}
}

func (x *GetIceCandidateRequest) GetClientIdentity() string {
	if x != nil {
		return x.ClientIdentity
	}
	return ""
}

func (x *GetIceCandidateRequest) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

type GetIceCandidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string content_identity = 1;
	ClientIdentity string   `protobuf:"bytes,1,opt,name=client_identity,json=clientIdentity,proto3" json:"client_identity,omitempty"`
	Candidate      []string `protobuf:"bytes,2,rep,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *GetIceCandidateResponse) Reset() {
	*x = GetIceCandidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIceCandidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIceCandidateResponse) ProtoMessage() {}

func (x *GetIceCandidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIceCandidateResponse.ProtoReflect.Descriptor instead.
func (*GetIceCandidateResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{11}
}

func (x *GetIceCandidateResponse) GetClientIdentity() string {
	if x != nil {
		return x.ClientIdentity
	}
	return ""
}

func (x *GetIceCandidateResponse) GetCandidate() []string {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type ParseFileSliceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentIdentity string       `protobuf:"bytes,1,opt,name=content_identity,json=contentIdentity,proto3" json:"content_identity,omitempty"`
	MetaNodes       []string     `protobuf:"bytes,2,rep,name=meta_nodes,json=metaNodes,proto3" json:"meta_nodes,omitempty"`
	RawNodes        []string     `protobuf:"bytes,3,rep,name=raw_nodes,json=rawNodes,proto3" json:"raw_nodes,omitempty"`
	FileSize        int64        `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Sizes           []*SliceSize `protobuf:"bytes,5,rep,name=sizes,proto3" json:"sizes,omitempty"`
	Sha1            string       `protobuf:"bytes,6,opt,name=sha1,proto3" json:"sha1,omitempty"`
	WcsEtag         string       `protobuf:"bytes,7,opt,name=wcs_etag,json=wcsEtag,proto3" json:"wcs_etag,omitempty"`
	Name            string       `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Path            string       `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	StoreType       int64        `protobuf:"varint,10,opt,name=store_type,json=storeType,proto3" json:"store_type,omitempty"`
}

func (x *ParseFileSliceResponse) Reset() {
	*x = ParseFileSliceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseFileSliceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFileSliceResponse) ProtoMessage() {}

func (x *ParseFileSliceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFileSliceResponse.ProtoReflect.Descriptor instead.
func (*ParseFileSliceResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{12}
}

func (x *ParseFileSliceResponse) GetContentIdentity() string {
	if x != nil {
		return x.ContentIdentity
	}
	return ""
}

func (x *ParseFileSliceResponse) GetMetaNodes() []string {
	if x != nil {
		return x.MetaNodes
	}
	return nil
}

func (x *ParseFileSliceResponse) GetRawNodes() []string {
	if x != nil {
		return x.RawNodes
	}
	return nil
}

func (x *ParseFileSliceResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ParseFileSliceResponse) GetSizes() []*SliceSize {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *ParseFileSliceResponse) GetSha1() string {
	if x != nil {
		return x.Sha1
	}
	return ""
}

func (x *ParseFileSliceResponse) GetWcsEtag() string {
	if x != nil {
		return x.WcsEtag
	}
	return ""
}

func (x *ParseFileSliceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParseFileSliceResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParseFileSliceResponse) GetStoreType() int64 {
	if x != nil {
		return x.StoreType
	}
	return 0
}

type SliceSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex int64 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex   int64 `protobuf:"varint,2,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	Size       int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SliceSize) Reset() {
	*x = SliceSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceSize) ProtoMessage() {}

func (x *SliceSize) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceSize.ProtoReflect.Descriptor instead.
func (*SliceSize) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{13}
}

func (x *SliceSize) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *SliceSize) GetEndIndex() int64 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

func (x *SliceSize) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SliceDownloadAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity []string `protobuf:"bytes,1,rep,name=identity,proto3" json:"identity,omitempty"`
	Version  int32    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Filename string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Flag     int64    `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *SliceDownloadAddressRequest) Reset() {
	*x = SliceDownloadAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceDownloadAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceDownloadAddressRequest) ProtoMessage() {}

func (x *SliceDownloadAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceDownloadAddressRequest.ProtoReflect.Descriptor instead.
func (*SliceDownloadAddressRequest) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{14}
}

func (x *SliceDownloadAddressRequest) GetIdentity() []string {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SliceDownloadAddressRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SliceDownloadAddressRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SliceDownloadAddressRequest) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type SliceDownloadAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses      []*SliceDownloadInfo `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	ExpireAt       int64                `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	RequestAddress string               `protobuf:"bytes,3,opt,name=request_address,json=requestAddress,proto3" json:"request_address,omitempty"`
	Version        int32                `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SliceDownloadAddressResponse) Reset() {
	*x = SliceDownloadAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceDownloadAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceDownloadAddressResponse) ProtoMessage() {}

func (x *SliceDownloadAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceDownloadAddressResponse.ProtoReflect.Descriptor instead.
func (*SliceDownloadAddressResponse) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{15}
}

func (x *SliceDownloadAddressResponse) GetAddresses() []*SliceDownloadInfo {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *SliceDownloadAddressResponse) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *SliceDownloadAddressResponse) GetRequestAddress() string {
	if x != nil {
		return x.RequestAddress
	}
	return ""
}

func (x *SliceDownloadAddressResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SliceDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity        string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	DownloadAddress string `protobuf:"bytes,2,opt,name=download_address,json=downloadAddress,proto3" json:"download_address,omitempty"`
	DownloadToken   string `protobuf:"bytes,3,opt,name=download_token,json=downloadToken,proto3" json:"download_token,omitempty"`
	Encrypt         int32  `protobuf:"varint,4,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	StoreType       int64  `protobuf:"varint,5,opt,name=store_type,json=storeType,proto3" json:"store_type,omitempty"`
}

func (x *SliceDownloadInfo) Reset() {
	*x = SliceDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceDownloadInfo) ProtoMessage() {}

func (x *SliceDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceDownloadInfo.ProtoReflect.Descriptor instead.
func (*SliceDownloadInfo) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{16}
}

func (x *SliceDownloadInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SliceDownloadInfo) GetDownloadAddress() string {
	if x != nil {
		return x.DownloadAddress
	}
	return ""
}

func (x *SliceDownloadInfo) GetDownloadToken() string {
	if x != nil {
		return x.DownloadToken
	}
	return ""
}

func (x *SliceDownloadInfo) GetEncrypt() int32 {
	if x != nil {
		return x.Encrypt
	}
	return 0
}

func (x *SliceDownloadInfo) GetStoreType() int64 {
	if x != nil {
		return x.StoreType
	}
	return 0
}

type DocFilePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Parent         string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Path           string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	MimeType       string `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size           int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Type           int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	CanPreview     bool   `protobuf:"varint,9,opt,name=can_preview,json=canPreview,proto3" json:"can_preview,omitempty"`
	PreviewAddress string `protobuf:"bytes,10,opt,name=preview_address,json=previewAddress,proto3" json:"preview_address,omitempty"`
	PreviewToken   string `protobuf:"bytes,11,opt,name=preview_token,json=previewToken,proto3" json:"preview_token,omitempty"`
	CanEdit        bool   `protobuf:"varint,12,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	EditAddress    string `protobuf:"bytes,13,opt,name=edit_address,json=editAddress,proto3" json:"edit_address,omitempty"`
	EditToken      string `protobuf:"bytes,14,opt,name=edit_token,json=editToken,proto3" json:"edit_token,omitempty"`
}

func (x *DocFilePreview) Reset() {
	*x = DocFilePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocFilePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocFilePreview) ProtoMessage() {}

func (x *DocFilePreview) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocFilePreview.ProtoReflect.Descriptor instead.
func (*DocFilePreview) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{17}
}

func (x *DocFilePreview) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DocFilePreview) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DocFilePreview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocFilePreview) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DocFilePreview) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *DocFilePreview) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DocFilePreview) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DocFilePreview) GetCanPreview() bool {
	if x != nil {
		return x.CanPreview
	}
	return false
}

func (x *DocFilePreview) GetPreviewAddress() string {
	if x != nil {
		return x.PreviewAddress
	}
	return ""
}

func (x *DocFilePreview) GetPreviewToken() string {
	if x != nil {
		return x.PreviewToken
	}
	return ""
}

func (x *DocFilePreview) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *DocFilePreview) GetEditAddress() string {
	if x != nil {
		return x.EditAddress
	}
	return ""
}

func (x *DocFilePreview) GetEditToken() string {
	if x != nil {
		return x.EditToken
	}
	return ""
}

type DownloadAndPreviewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity              string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Parent                string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Path                  string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	MimeType              string `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                  int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Type                  int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	CanPreview            bool   `protobuf:"varint,9,opt,name=can_preview,json=canPreview,proto3" json:"can_preview,omitempty"`
	CanEdit               bool   `protobuf:"varint,10,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	PreviewType           int32  `protobuf:"varint,11,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`
	DownloadType          int32  `protobuf:"varint,12,opt,name=download_type,json=downloadType,proto3" json:"download_type,omitempty"`
	Sha1                  string `protobuf:"bytes,13,opt,name=sha1,proto3" json:"sha1,omitempty"`
	CanDownload           bool   `protobuf:"varint,14,opt,name=can_download,json=canDownload,proto3" json:"can_download,omitempty"`
	CannotDownloadMessage string `protobuf:"bytes,15,opt,name=cannot_download_message,json=cannotDownloadMessage,proto3" json:"cannot_download_message,omitempty"`
	ContentIdentity       string `protobuf:"bytes,16,opt,name=content_identity,json=contentIdentity,proto3" json:"content_identity,omitempty"`
}

func (x *DownloadAndPreviewInfo) Reset() {
	*x = DownloadAndPreviewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAndPreviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAndPreviewInfo) ProtoMessage() {}

func (x *DownloadAndPreviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAndPreviewInfo.ProtoReflect.Descriptor instead.
func (*DownloadAndPreviewInfo) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{18}
}

func (x *DownloadAndPreviewInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DownloadAndPreviewInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DownloadAndPreviewInfo) GetCanPreview() bool {
	if x != nil {
		return x.CanPreview
	}
	return false
}

func (x *DownloadAndPreviewInfo) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *DownloadAndPreviewInfo) GetPreviewType() int32 {
	if x != nil {
		return x.PreviewType
	}
	return 0
}

func (x *DownloadAndPreviewInfo) GetDownloadType() int32 {
	if x != nil {
		return x.DownloadType
	}
	return 0
}

func (x *DownloadAndPreviewInfo) GetSha1() string {
	if x != nil {
		return x.Sha1
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetCanDownload() bool {
	if x != nil {
		return x.CanDownload
	}
	return false
}

func (x *DownloadAndPreviewInfo) GetCannotDownloadMessage() string {
	if x != nil {
		return x.CannotDownloadMessage
	}
	return ""
}

func (x *DownloadAndPreviewInfo) GetContentIdentity() string {
	if x != nil {
		return x.ContentIdentity
	}
	return ""
}

type UploadToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AccessKey string `protobuf:"bytes,10,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,11,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Bucket    string `protobuf:"bytes,12,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region    string `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint  string `protobuf:"bytes,14,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Key       string `protobuf:"bytes,15,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UploadToken) Reset() {
	*x = UploadToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userfile_public_user_file_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadToken) ProtoMessage() {}

func (x *UploadToken) ProtoReflect() protoreflect.Message {
	mi := &file_userfile_public_user_file_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadToken.ProtoReflect.Descriptor instead.
func (*UploadToken) Descriptor() ([]byte, []int) {
	return file_userfile_public_user_file_proto_rawDescGZIP(), []int{19}
}

func (x *UploadToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadToken) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *UploadToken) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *UploadToken) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *UploadToken) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UploadToken) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UploadToken) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_userfile_public_user_file_proto protoreflect.FileDescriptor

var file_userfile_public_user_file_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x75, 0x62, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a,
	0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63,
	0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x54, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x64, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x54,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x17, 0x53,
	0x65, 0x6e, 0x64, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a,
	0x18, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x61, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x63, 0x73, 0x5f,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x63, 0x73, 0x45,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x09, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22,
	0xc0, 0x01, 0x0a, 0x1c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xfd, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x64, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xd7, 0x03, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x68, 0x61, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xfa, 0x0f, 0x0a, 0x0b,
	0x50, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x27, 0x2e,
	0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x20, 0x2e, 0x76, 0x36, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76,
	0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x52, 0x54, 0x43, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x54, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x52, 0x54, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x63, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x27, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63, 0x12, 0x15, 0x2e, 0x76, 0x36,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x1f, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x44, 0x6f, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x12, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1f, 0x2e, 0x76, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x44, 0x6f, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x15, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1c, 0x2e, 0x76, 0x36, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x34, 0x30, 0x34, 0x2f, 0x76,
	0x36, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x36, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userfile_public_user_file_proto_rawDescOnce sync.Once
	file_userfile_public_user_file_proto_rawDescData = file_userfile_public_user_file_proto_rawDesc
)

func file_userfile_public_user_file_proto_rawDescGZIP() []byte {
	file_userfile_public_user_file_proto_rawDescOnce.Do(func() {
		file_userfile_public_user_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_userfile_public_user_file_proto_rawDescData)
	})
	return file_userfile_public_user_file_proto_rawDescData
}

var file_userfile_public_user_file_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_userfile_public_user_file_proto_goTypes = []any{
	(*File)(nil),                         // 0: v6.services.pub.File
	(*FileListRequest)(nil),              // 1: v6.services.pub.FileListRequest
	(*SearchRequest)(nil),                // 2: v6.services.pub.SearchRequest
	(*FileListResponse)(nil),             // 3: v6.services.pub.FileListResponse
	(*BatchOperationRequest)(nil),        // 4: v6.services.pub.BatchOperationRequest
	(*BatchOperationResponse)(nil),       // 5: v6.services.pub.BatchOperationResponse
	(*ManageRTCRequest)(nil),             // 6: v6.services.pub.ManageRTCRequest
	(*ManageRTCResponse)(nil),            // 7: v6.services.pub.ManageRTCResponse
	(*SendIceCandidateRequest)(nil),      // 8: v6.services.pub.SendIceCandidateRequest
	(*SendIceCandidateResponse)(nil),     // 9: v6.services.pub.SendIceCandidateResponse
	(*GetIceCandidateRequest)(nil),       // 10: v6.services.pub.GetIceCandidateRequest
	(*GetIceCandidateResponse)(nil),      // 11: v6.services.pub.GetIceCandidateResponse
	(*ParseFileSliceResponse)(nil),       // 12: v6.services.pub.ParseFileSliceResponse
	(*SliceSize)(nil),                    // 13: v6.services.pub.SliceSize
	(*SliceDownloadAddressRequest)(nil),  // 14: v6.services.pub.SliceDownloadAddressRequest
	(*SliceDownloadAddressResponse)(nil), // 15: v6.services.pub.SliceDownloadAddressResponse
	(*SliceDownloadInfo)(nil),            // 16: v6.services.pub.SliceDownloadInfo
	(*DocFilePreview)(nil),               // 17: v6.services.pub.DocFilePreview
	(*DownloadAndPreviewInfo)(nil),       // 18: v6.services.pub.DownloadAndPreviewInfo
	(*UploadToken)(nil),                  // 19: v6.services.pub.UploadToken
	(*common.ScanListRequest)(nil),       // 20: v6.services.pub.common.ScanListRequest
}
var file_userfile_public_user_file_proto_depIdxs = []int32{
	0,  // 0: v6.services.pub.FileListRequest.parent:type_name -> v6.services.pub.File
	0,  // 1: v6.services.pub.FileListRequest.filter:type_name -> v6.services.pub.File
	20, // 2: v6.services.pub.FileListRequest.list_info:type_name -> v6.services.pub.common.ScanListRequest
	20, // 3: v6.services.pub.SearchRequest.list_info:type_name -> v6.services.pub.common.ScanListRequest
	0,  // 4: v6.services.pub.FileListResponse.files:type_name -> v6.services.pub.File
	20, // 5: v6.services.pub.FileListResponse.list_info:type_name -> v6.services.pub.common.ScanListRequest
	0,  // 6: v6.services.pub.BatchOperationRequest.source:type_name -> v6.services.pub.File
	0,  // 7: v6.services.pub.BatchOperationRequest.dest:type_name -> v6.services.pub.File
	13, // 8: v6.services.pub.ParseFileSliceResponse.sizes:type_name -> v6.services.pub.SliceSize
	16, // 9: v6.services.pub.SliceDownloadAddressResponse.addresses:type_name -> v6.services.pub.SliceDownloadInfo
	0,  // 10: v6.services.pub.PubUserFile.Create:input_type -> v6.services.pub.File
	0,  // 11: v6.services.pub.PubUserFile.Get:input_type -> v6.services.pub.File
	0,  // 12: v6.services.pub.PubUserFile.Rename:input_type -> v6.services.pub.File
	4,  // 13: v6.services.pub.PubUserFile.Trash:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 14: v6.services.pub.PubUserFile.Move:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 15: v6.services.pub.PubUserFile.Copy:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 16: v6.services.pub.PubUserFile.Delete:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 17: v6.services.pub.PubUserFile.DeleteTrash:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 18: v6.services.pub.PubUserFile.Recover:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 19: v6.services.pub.PubUserFile.BatchRename:input_type -> v6.services.pub.BatchOperationRequest
	4,  // 20: v6.services.pub.PubUserFile.BatchOperation:input_type -> v6.services.pub.BatchOperationRequest
	1,  // 21: v6.services.pub.PubUserFile.List:input_type -> v6.services.pub.FileListRequest
	1,  // 22: v6.services.pub.PubUserFile.ListTrash:input_type -> v6.services.pub.FileListRequest
	2,  // 23: v6.services.pub.PubUserFile.Search:input_type -> v6.services.pub.SearchRequest
	6,  // 24: v6.services.pub.PubUserFile.CreateManageRTCOffer:input_type -> v6.services.pub.ManageRTCRequest
	8,  // 25: v6.services.pub.PubUserFile.SendClientIceCandidate:input_type -> v6.services.pub.SendIceCandidateRequest
	10, // 26: v6.services.pub.PubUserFile.GetServerIceCandidate:input_type -> v6.services.pub.GetIceCandidateRequest
	0,  // 27: v6.services.pub.PubUserFile.ParseFileSlice:input_type -> v6.services.pub.File
	14, // 28: v6.services.pub.PubUserFile.GetSliceDownloadAddress:input_type -> v6.services.pub.SliceDownloadAddressRequest
	0,  // 29: v6.services.pub.PubUserFile.GetDownloadAndPreviewInfo:input_type -> v6.services.pub.File
	0,  // 30: v6.services.pub.PubUserFile.PreviewDoc:input_type -> v6.services.pub.File
	0,  // 31: v6.services.pub.PubUserFile.CreateDoc:input_type -> v6.services.pub.File
	0,  // 32: v6.services.pub.PubUserFile.CreateUploadToken:input_type -> v6.services.pub.File
	0,  // 33: v6.services.pub.PubUserFile.Create:output_type -> v6.services.pub.File
	0,  // 34: v6.services.pub.PubUserFile.Get:output_type -> v6.services.pub.File
	5,  // 35: v6.services.pub.PubUserFile.Rename:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 36: v6.services.pub.PubUserFile.Trash:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 37: v6.services.pub.PubUserFile.Move:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 38: v6.services.pub.PubUserFile.Copy:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 39: v6.services.pub.PubUserFile.Delete:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 40: v6.services.pub.PubUserFile.DeleteTrash:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 41: v6.services.pub.PubUserFile.Recover:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 42: v6.services.pub.PubUserFile.BatchRename:output_type -> v6.services.pub.BatchOperationResponse
	5,  // 43: v6.services.pub.PubUserFile.BatchOperation:output_type -> v6.services.pub.BatchOperationResponse
	3,  // 44: v6.services.pub.PubUserFile.List:output_type -> v6.services.pub.FileListResponse
	3,  // 45: v6.services.pub.PubUserFile.ListTrash:output_type -> v6.services.pub.FileListResponse
	3,  // 46: v6.services.pub.PubUserFile.Search:output_type -> v6.services.pub.FileListResponse
	7,  // 47: v6.services.pub.PubUserFile.CreateManageRTCOffer:output_type -> v6.services.pub.ManageRTCResponse
	9,  // 48: v6.services.pub.PubUserFile.SendClientIceCandidate:output_type -> v6.services.pub.SendIceCandidateResponse
	11, // 49: v6.services.pub.PubUserFile.GetServerIceCandidate:output_type -> v6.services.pub.GetIceCandidateResponse
	12, // 50: v6.services.pub.PubUserFile.ParseFileSlice:output_type -> v6.services.pub.ParseFileSliceResponse
	15, // 51: v6.services.pub.PubUserFile.GetSliceDownloadAddress:output_type -> v6.services.pub.SliceDownloadAddressResponse
	18, // 52: v6.services.pub.PubUserFile.GetDownloadAndPreviewInfo:output_type -> v6.services.pub.DownloadAndPreviewInfo
	17, // 53: v6.services.pub.PubUserFile.PreviewDoc:output_type -> v6.services.pub.DocFilePreview
	17, // 54: v6.services.pub.PubUserFile.CreateDoc:output_type -> v6.services.pub.DocFilePreview
	19, // 55: v6.services.pub.PubUserFile.CreateUploadToken:output_type -> v6.services.pub.UploadToken
	33, // [33:56] is the sub-list for method output_type
	10, // [10:33] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_userfile_public_user_file_proto_init() }
func file_userfile_public_user_file_proto_init() {
	if File_userfile_public_user_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userfile_public_user_file_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FileListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FileListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ManageRTCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ManageRTCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SendIceCandidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SendIceCandidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetIceCandidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetIceCandidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ParseFileSliceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SliceSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SliceDownloadAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SliceDownloadAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SliceDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DocFilePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadAndPreviewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userfile_public_user_file_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UploadToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userfile_public_user_file_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userfile_public_user_file_proto_goTypes,
		DependencyIndexes: file_userfile_public_user_file_proto_depIdxs,
		MessageInfos:      file_userfile_public_user_file_proto_msgTypes,
	}.Build()
	File_userfile_public_user_file_proto = out.File
	file_userfile_public_user_file_proto_rawDesc = nil
	file_userfile_public_user_file_proto_goTypes = nil
	file_userfile_public_user_file_proto_depIdxs = nil
}
